package com.foodSafe.Blockchain.control;


import com.foodSafe.Blockchain.service.mongodbControl;


import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public class WorkOutData {
    //private List<String> map =  Arrays.asList("1", "2", "1", "3", "1", "4", "1", "5", "1", "6", "1", "7", "1", "8", "1", "9", "1", "10", "1", "11", "1", "12", "1", "13", "1", "14", "1", "15", "1", "16", "1", "17", "2", "15", "2", "1", "2", "4", "2", "18", "2", "19", "2", "3", "2", "9", "2", "20", "2", "21", "2", "22", "2", "23", "2", "24", "2", "25", "2", "13", "2", "26", "2", "27", "3", "28", "3", "8", "3", "29", "3", "1", "3", "6", "3", "4", "3", "30", "3", "31", "3", "17", "3", "2", "3", "32", "3", "33", "3", "34", "3", "25", "3", "35", "3", "36", "3", "37", "3", "5", "3", "38", "3", "39", "3", "40", "3", "41", "3", "42", "3", "43", "3", "44", "3", "45", "4", "15", "4", "1", "4", "3", "4", "18", "4", "9", "4", "2", "4", "21", "4", "19", "4", "46", "4", "13", "4", "23", "4", "41", "4", "47", "4", "8", "4", "48", "4", "49", "5", "6", "5", "32", "5", "50", "5", "51", "5", "3", "5", "25", "5", "33", "5", "29", "5", "52", "5", "53", "5", "40", "5", "28", "5", "8", "5", "54", "5", "55", "5", "10", "5", "56", "5", "57", "5", "31", "5", "58", "5", "59", "5", "1", "5", "60", "5", "42", "5", "61", "5", "62", "5", "63", "5", "64", "5", "36", "5", "65", "6", "1", "6", "29", "6", "3", "6", "51", "6", "57", "6", "36", "6", "33", "6", "40", "6", "28", "6", "42", "6", "31", "6", "8", "6", "64", "6", "60", "6", "53", "6", "43", "6", "66", "6", "5", "6", "67", "6", "56", "7", "68", "7", "69", "7", "70", "7", "71", "7", "17", "7", "72", "7", "73", "7", "74", "7", "75", "7", "76", "7", "77", "7", "78", "7", "79", "7", "80", "7", "44", "7", "81", "7", "82", "7", "83", "7", "61", "7", "56", "7", "84", "7", "85", "8", "3", "8", "1", "8", "37", "8", "52", "8", "10", "8", "86", "8", "61", "8", "44", "8", "31", "8", "87", "8", "39", "8", "65", "8", "28", "8", "36", "8", "38", "8", "88", "8", "89", "8", "5", "8", "32", "8", "59", "8", "29", "8", "30", "8", "51", "8", "90", "8", "17", "8", "4", "8", "91", "8", "92", "8", "93", "8", "94", "8", "95", "8", "96", "9", "47", "9", "97", "9", "98", "9", "99", "9", "100", "9", "101", "9", "102", "9", "103", "9", "104", "9", "105", "9", "106", "9", "107", "9", "108", "9", "109", "9", "110", "9", "111", "9", "112", "9", "113", "9", "114", "9", "115", "9", "116", "9", "117", "10", "38", "10", "51", "10", "1", "10", "64", "10", "118", "10", "57", "10", "119", "10", "29", "10", "54", "10", "28", "10", "3", "10", "31", "10", "8", "10", "33", "10", "36", "10", "5", "11", "120", "11", "121", "11", "122", "11", "123", "11", "124", "11", "125", "11", "126", "11", "127", "11", "128", "11", "16", "11", "129", "11", "130", "11", "131", "11", "132", "11", "133", "11", "134", "11", "135", "11", "136", "11", "137", "11", "138", "11", "139", "11", "140", "11", "141", "11", "142", "11", "143", "11", "144", "11", "145", "11", "146", "11", "147", "11", "148", "11", "149", "11", "150", "12", "62", "12", "151", "12", "5", "12", "152", "12", "3", "12", "8", "12", "66", "12", "119", "12", "67", "12", "79", "12", "60", "12", "51", "12", "153", "12", "154", "12", "155", "12", "29", "13", "156", "13", "157", "13", "158", "13", "107", "13", "159", "13", "160", "13", "161", "13", "162", "13", "163", "13", "164", "13", "165", "13", "117", "13", "116", "13", "166", "13", "167", "13", "168", "13", "115", "13", "169", "13", "170", "13", "171", "14", "172", "14", "7", "14", "173", "14", "83", "14", "73", "14", "72", "14", "17", "15", "174", "15", "2", "15", "22", "15", "175", "15", "176", "15", "177", "15", "178", "15", "179", "15", "19", "15", "180", "15", "181", "15", "182", "15", "183", "15", "26", "15", "184", "15", "185", "15", "186", "15", "187", "15", "188", "15", "189", "15", "190", "15", "191", "15", "192", "15", "193", "15", "194", "16", "137", "16", "195", "16", "120", "16", "196", "16", "197", "16", "124", "16", "198", "16", "136", "16", "199", "16", "200", "16", "135", "16", "127", "16", "201", "16", "202", "16", "121", "16", "203", "16", "204", "16", "122", "16", "205", "16", "206", "16", "207", "16", "208", "16", "125", "16", "209", "16", "123", "16", "210", "17", "211", "17", "212", "17", "7", "17", "73", "17", "77", "17", "75", "17", "79", "17", "80", "17", "173", "17", "68", "17", "78", "17", "213", "17", "81", "17", "56", "17", "69", "17", "214", "17", "72", "17", "76", "17", "74", "17", "82", "19", "215", "19", "216", "19", "217", "19", "189", "19", "218", "19", "219", "19", "179", "19", "23", "19", "220", "19", "221", "19", "26", "19", "222", "19", "223", "19", "15", "19", "224", "19", "225", "19", "191", "19", "22", "19", "226", "19", "190", "19", "174", "20", "176", "20", "188", "20", "177", "20", "175", "20", "187", "20", "186", "20", "227", "20", "189", "20", "228", "20", "19", "20", "229", "20", "230", "20", "23", "20", "192", "20", "231", "20", "191", "20", "174", "20", "15", "20", "2", "20", "22", "21", "2", "21", "15", "21", "1", "21", "22", "21", "3", "21", "232", "21", "18", "21", "19", "21", "233", "21", "234", "21", "235", "21", "26", "21", "236", "21", "237", "21", "176", "21", "238", "22", "176", "22", "177", "22", "175", "22", "174", "22", "15", "22", "26", "22", "191", "22", "19", "22", "2", "22", "188", "22", "186", "22", "182", "22", "239", "22", "240", "22", "190", "22", "241", "22", "178", "22", "242", "22", "243", "22", "244", "22", "245", "22", "180", "23", "246", "23", "247", "23", "227", "23", "248", "23", "249", "23", "250", "23", "251", "23", "252", "23", "253", "23", "254", "23", "255", "23", "256", "23", "257", "23", "258", "23", "259", "23", "260", "23", "261", "23", "262", "23", "263", "23", "264", "23", "265", "23", "266", "23", "267", "23", "268", "24", "187", "24", "269", "24", "270", "24", "271", "24", "272", "24", "47", "24", "273", "24", "274", "24", "275", "24", "2", "24", "276", "24", "277", "24", "278", "24", "279", "24", "3", "24", "9", "24", "56", "24", "280", "24", "1", "24", "281", "24", "282", "24", "283", "24", "44", "24", "4", "25", "6", "25", "5", "25", "7", "25", "52", "25", "137", "25", "3", "25", "2", "25", "4", "25", "161", "25", "32", "25", "284", "25", "37", "25", "1", "25", "16", "25", "169", "25", "285", "26", "242", "26", "182", "26", "175", "26", "178", "26", "286", "26", "241", "26", "174", "26", "287", "26", "288", "26", "289", "26", "290", "26", "291", "26", "292", "26", "293", "26", "15", "26", "190", "26", "294", "26", "22", "26", "295", "26", "237", "26", "296", "26", "245", "26", "183", "26", "297", "26", "180", "26", "176", "26", "298", "26", "299", "26", "300", "26", "301", "27", "302", "27", "303", "27", "304", "27", "305", "27", "306", "27", "307", "27", "308", "27", "309", "27", "310", "27", "311", "27", "312", "27", "23", "27", "313", "27", "314", "27", "315", "27", "316", "28", "317", "28", "318", "28", "8", "28", "4", "28", "319", "28", "320", "28", "16", "28", "321", "28", "322", "28", "323", "28", "324", "28", "3", "28", "325", "28", "57", "28", "5", "28", "44", "28", "69", "28", "326", "28", "50", "28", "327", "28", "328", "28", "329", "28", "330", "28", "305", "29", "57", "29", "3", "29", "31", "29", "38", "29", "64", "29", "8", "29", "331", "29", "39", "29", "45", "29", "5", "29", "60", "29", "67", "29", "33", "29", "56", "29", "40", "29", "28", "29", "42", "29", "36", "29", "332", "29", "333", "29", "138", "30", "317", "30", "318", "30", "3", "30", "325", "30", "4", "30", "8", "30", "5", "30", "57", "30", "323", "30", "322", "30", "334", "30", "335", "30", "50", "30", "37", "30", "284", "30", "41", "30", "44", "30", "16", "30", "319", "30", "328", "30", "330", "30", "69", "31", "5", "31", "1", "31", "57", "31", "59", "31", "40", "31", "8", "31", "53", "31", "60", "31", "45", "31", "52", "31", "42", "31", "28", "31", "43", "31", "29", "31", "3", "31", "33", "31", "64", "31", "36", "31", "56", "31", "10", "31", "51", "31", "32", "31", "118", "31", "87", "31", "336", "31", "333", "31", "41", "31", "54", "31", "38", "32", "33", "32", "5", "32", "10", "32", "58", "32", "52", "32", "57", "32", "3", "32", "31", "32", "40", "32", "53", "32", "42", "32", "29", "32", "67", "32", "36", "32", "66", "32", "1", "32", "51", "32", "60", "32", "337", "32", "28", "32", "59", "32", "332", "32", "39", "33", "36", "33", "53", "33", "3", "33", "66", "33", "67", "33", "51", "33", "28", "33", "57", "33", "1", "33", "58", "33", "40", "33", "10", "33", "31", "33", "52", "33", "39", "33", "93", "33", "5", "33", "42", "33", "29", "33", "60", "34", "333", "34", "338", "34", "39", "34", "337", "34", "339", "34", "340", "34", "319", "34", "341", "34", "60", "34", "40", "34", "321", "34", "3", "34", "88", "34", "342", "34", "66", "34", "42", "34", "67", "34", "43", "34", "93", "34", "343", "35", "344", "35", "345", "35", "138", "35", "346", "35", "347", "35", "284", "35", "348", "35", "349", "35", "350", "35", "351", "35", "16", "35", "352", "35", "335", "35", "353", "35", "318", "35", "324", "35", "354", "35", "330", "35", "355", "35", "11", "35", "328", "35", "206", "35", "356", "35", "357", "35", "358", "35", "359", "35", "360", "35", "361", "35", "362", "35", "363", "35", "364", "37", "322", "37", "41", "37", "365", "37", "366", "37", "367", "37", "368", "37", "321", "37", "369", "37", "370", "37", "371", "37", "372", "37", "373", "37", "374", "37", "375", "37", "73", "37", "376", "37", "377", "37", "378", "37", "379", "37", "380", "37", "3", "37", "381", "37", "382", "37", "8", "37", "383", "37", "384", "37", "385", "37", "7", "37", "334", "37", "386", "37", "387", "37", "65", "38", "29", "38", "67", "38", "57", "38", "10", "38", "3", "38", "58", "38", "53", "38", "5", "38", "40", "38", "52", "38", "60", "38", "31", "38", "33", "38", "1", "38", "28", "38", "8", "38", "51", "38", "42", "38", "66", "38", "36", "38", "45", "38", "64", "38", "39", "39", "42", "39", "93", "39", "60", "39", "8", "39", "337", "39", "3", "39", "29", "39", "388", "39", "66", "39", "43", "39", "28", "39", "34", "39", "59", "39", "1", "39", "5", "39", "40", "39", "67", "39", "57", "39", "10", "39", "33", "40", "67", "40", "57", "40", "29", "40", "58", "40", "60", "40", "1", "40", "28", "40", "389", "40", "52", "40", "42", "40", "8", "40", "53", "40", "390", "40", "119", "40", "391", "40", "3", "40", "31", "40", "51", "40", "36", "40", "5", "40", "66", "40", "10", "40", "33", "40", "56", "41", "322", "41", "37", "41", "371", "41", "380", "41", "392", "41", "393", "41", "394", "41", "395", "41", "396", "41", "397", "41", "65", "41", "398", "41", "399", "41", "400", "41", "88", "41", "334", "41", "401", "41", "366", "41", "372", "41", "321", "41", "365", "41", "367", "41", "402", "41", "403", "41", "404", "41", "405", "41", "406", "41", "407", "41", "369", "41", "408", "41", "409", "41", "370", "42", "60", "42", "93", "42", "33", "42", "39", "42", "29", "42", "59", "42", "32", "42", "67", "42", "66", "42", "57", "42", "410", "42", "10", "42", "1", "42", "28", "42", "58", "42", "8", "42", "138", "42", "5", "42", "3", "42", "337", "42", "388", "42", "43", "42", "411", "42", "358", "43", "412", "43", "413", "43", "324", "43", "41", "43", "3", "43", "337", "43", "348", "43", "8", "43", "322", "43", "37", "43", "59", "43", "388", "43", "40", "43", "93", "43", "31", "43", "335", "43", "414", "43", "88", "43", "39", "43", "42", "44", "56", "44", "326", "44", "155", "44", "327", "44", "415", "44", "281", "44", "416", "44", "417", "44", "329", "44", "42", "44", "74", "44", "45", "44", "57", "44", "8", "44", "418", "44", "5", "44", "39", "44", "33", "44", "60", "44", "66", "44", "28", "44", "67", "44", "3", "45", "28", "45", "29", "45", "60", "45", "51", "45", "42", "45", "5", "45", "33", "45", "58", "45", "39", "45", "1", "45", "31", "45", "341", "45", "44", "45", "325", "45", "67", "45", "59", "45", "278", "45", "56", "45", "3", "45", "57", "45", "40", "45", "66", "47", "2", "47", "419", "47", "9", "47", "420", "47", "4", "47", "3", "47", "46", "47", "1", "47", "421", "47", "422", "47", "423", "47", "21", "47", "424", "47", "425", "47", "426", "47", "13", "49", "155", "49", "427", "49", "4", "49", "1", "49", "66", "49", "61", "49", "5", "49", "326", "49", "44", "49", "347", "49", "59", "49", "24", "49", "29", "49", "428", "49", "283", "49", "2", "49", "318", "49", "317", "49", "28", "49", "3", "49", "8", "49", "281", "49", "280", "50", "5", "50", "67", "50", "29", "50", "66", "50", "57", "50", "28", "50", "1", "50", "33", "50", "325", "50", "10", "50", "36", "50", "42", "50", "64", "50", "8", "50", "40", "50", "60", "50", "3", "50", "31", "50", "58");
    private static int NodeSize = 429;
    private static int NodeDelete[] = new int[NodeSize];
    private static int matrix[][] = new int[NodeSize][NodeSize];
    private static ArrayList<Integer> Degree = new ArrayList<Integer>();
    private static mongodbControl mongodb = new mongodbControl("Network");
    private static ArrayList<String> Map =new ArrayList<String>();

    public WorkOutData(String  Flag,String Value)
    {
        ArrayList<String> MapB =new ArrayList<String>();
        MapB = mongodb.FindDocumentAT("Relation","Version","0");
        ArrayList<String> map = new ArrayList<String>();
        String MapS = MapB.get(0);
        MapS = MapS.substring(1,(MapS.length()-1));
        String [] MapList = MapS.split(",");
        for(int i = 0,j=1;j<MapList.length;i=i+2,j=j+2)
        {
            Map.add(MapList[i].trim());
            Map.add(MapList[j].trim());
            matrix[Integer.parseInt(MapList[i].trim())][Integer.parseInt(MapList[j].trim())] = 1;
            matrix[Integer.parseInt(MapList[j].trim())][Integer.parseInt(MapList[i].trim())] = 1;
        }
        Degree = DegreeDis(NodeSize,matrix);
        //按照主要节点攻击之后的数据
        if (Flag.equals("1"))
        {
            for (int i =0;i<Integer.parseInt(Value);i++)
            {
                int index = FindBigDegree();
                //代表被删除 由于id是从1开始的 所以++
                NodeDelete[index+1]=1;
                DeleteMtrix(index+1);
                Degree.set(index,0);
            }
        }
        //随机攻击之后的数据
        else if (Flag.equals("2"))
        {

            for (int i =0;i<Integer.parseInt(Value);i++)
            {
                int index = 0;
                do {
                    index = new java.util.Random().nextInt(420)+1;
                }while (NodeDelete[index]==1);
                Degree.set(index-1,0);
                DeleteMtrix(index);
                NodeDelete[index]=1;
            }
        }

//        for(int i = 0,j=1;j<map.size();i=i+2,j=j+2)
//        {
//            matrix[Integer.parseInt(map.get(i))][Integer.parseInt(map.get(j))] = 1;
//            matrix[Integer.parseInt(map.get(j))][Integer.parseInt(map.get(i))] = 1;
//        }
    }

    public static int[] DegreeList()
    {
        int Dis[] = new int[50];
        for(int i = 0;i<Degree.size();i++)
        {
            Dis[Degree.get(i)]++;
        }
        return Dis;
    }

    public static void WriteDegreeData(int[] Dis)
    {
        ArrayList<Map<String, Integer>> DegreeNodeFile = new ArrayList<Map<String,Integer>>();
        String data = "[";
        for (int i =0 ;i<Dis.length;i++)
        {
            if (i!=0)
            {
                data += ",";
            }
            data += "["+i+","+Dis[i]+"]";
            Map<String,Integer> OneDegree =  new HashMap<>();
            OneDegree.put(""+i,Dis[i]);
            DegreeNodeFile.add(OneDegree);
        }
        data += "]";
        System.out.println(data);
        FileWriter writer;
        try
        {
            writer = new FileWriter("./src/main/resources/static/Degree1.json");//./../resources/static/templates/aqi-beijing.json
            writer.write(data);
            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(DegreeNodeFile);
    }
    /*
    * 返回当前最大的Degree返回对应的点的下标 并且归零
    * */
    public static int FindBigDegree()
    {
        int max = 0;
        int index = 0;
        for (int i =0;i<Degree.size();i++)
        {
            if (Degree.get(i)>max)
            {
                max = Degree.get(i);
                index = i;
            }
        }
        Degree.set(index,0);
        return index;
    }

    public static void DeleteMtrix (int index)
    {
        for (int i =1;i<NodeSize;i++)
        {
            if (matrix[index][i]==1)
                Degree.set(i-1,Degree.get(i-1)-1);
            matrix[index][i]=0;
            matrix[i][index]=0;
        }
    }

    public static void main(String[] args)
    {
        ArrayList<String> data =  new ArrayList<String>();
        List<String> map =  Arrays.asList("1", "2", "1", "3", "1", "4", "1", "5", "1", "6", "1", "7", "1", "8", "1", "9", "1", "10", "1", "11", "1", "12", "1", "13", "1", "14", "1", "15", "1", "16", "1", "17", "2", "15", "2", "1", "2", "4", "2", "18", "2", "19", "2", "3", "2", "9", "2", "20", "2", "21", "2", "22", "2", "23", "2", "24", "2", "25", "2", "13", "2", "26", "2", "27", "3", "28", "3", "8", "3", "29", "3", "1", "3", "6", "3", "4", "3", "30", "3", "31", "3", "17", "3", "2", "3", "32", "3", "33", "3", "34", "3", "25", "3", "35", "3", "36", "3", "37", "3", "5", "3", "38", "3", "39", "3", "40", "3", "41", "3", "42", "3", "43", "3", "44", "3", "45", "4", "15", "4", "1", "4", "3", "4", "18", "4", "9", "4", "2", "4", "21", "4", "19", "4", "46", "4", "13", "4", "23", "4", "41", "4", "47", "4", "8", "4", "48", "4", "49", "5", "6", "5", "32", "5", "50", "5", "51", "5", "3", "5", "25", "5", "33", "5", "29", "5", "52", "5", "53", "5", "40", "5", "28", "5", "8", "5", "54", "5", "55", "5", "10", "5", "56", "5", "57", "5", "31", "5", "58", "5", "59", "5", "1", "5", "60", "5", "42", "5", "61", "5", "62", "5", "63", "5", "64", "5", "36", "5", "65", "6", "1", "6", "29", "6", "3", "6", "51", "6", "57", "6", "36", "6", "33", "6", "40", "6", "28", "6", "42", "6", "31", "6", "8", "6", "64", "6", "60", "6", "53", "6", "43", "6", "66", "6", "5", "6", "67", "6", "56", "7", "68", "7", "69", "7", "70", "7", "71", "7", "17", "7", "72", "7", "73", "7", "74", "7", "75", "7", "76", "7", "77", "7", "78", "7", "79", "7", "80", "7", "44", "7", "81", "7", "82", "7", "83", "7", "61", "7", "56", "7", "84", "7", "85", "8", "3", "8", "1", "8", "37", "8", "52", "8", "10", "8", "86", "8", "61", "8", "44", "8", "31", "8", "87", "8", "39", "8", "65", "8", "28", "8", "36", "8", "38", "8", "88", "8", "89", "8", "5", "8", "32", "8", "59", "8", "29", "8", "30", "8", "51", "8", "90", "8", "17", "8", "4", "8", "91", "8", "92", "8", "93", "8", "94", "8", "95", "8", "96", "9", "47", "9", "97", "9", "98", "9", "99", "9", "100", "9", "101", "9", "102", "9", "103", "9", "104", "9", "105", "9", "106", "9", "107", "9", "108", "9", "109", "9", "110", "9", "111", "9", "112", "9", "113", "9", "114", "9", "115", "9", "116", "9", "117", "10", "38", "10", "51", "10", "1", "10", "64", "10", "118", "10", "57", "10", "119", "10", "29", "10", "54", "10", "28", "10", "3", "10", "31", "10", "8", "10", "33", "10", "36", "10", "5", "11", "120", "11", "121", "11", "122", "11", "123", "11", "124", "11", "125", "11", "126", "11", "127", "11", "128", "11", "16", "11", "129", "11", "130", "11", "131", "11", "132", "11", "133", "11", "134", "11", "135", "11", "136", "11", "137", "11", "138", "11", "139", "11", "140", "11", "141", "11", "142", "11", "143", "11", "144", "11", "145", "11", "146", "11", "147", "11", "148", "11", "149", "11", "150", "12", "62", "12", "151", "12", "5", "12", "152", "12", "3", "12", "8", "12", "66", "12", "119", "12", "67", "12", "79", "12", "60", "12", "51", "12", "153", "12", "154", "12", "155", "12", "29", "13", "156", "13", "157", "13", "158", "13", "107", "13", "159", "13", "160", "13", "161", "13", "162", "13", "163", "13", "164", "13", "165", "13", "117", "13", "116", "13", "166", "13", "167", "13", "168", "13", "115", "13", "169", "13", "170", "13", "171", "14", "172", "14", "7", "14", "173", "14", "83", "14", "73", "14", "72", "14", "17", "15", "174", "15", "2", "15", "22", "15", "175", "15", "176", "15", "177", "15", "178", "15", "179", "15", "19", "15", "180", "15", "181", "15", "182", "15", "183", "15", "26", "15", "184", "15", "185", "15", "186", "15", "187", "15", "188", "15", "189", "15", "190", "15", "191", "15", "192", "15", "193", "15", "194", "16", "137", "16", "195", "16", "120", "16", "196", "16", "197", "16", "124", "16", "198", "16", "136", "16", "199", "16", "200", "16", "135", "16", "127", "16", "201", "16", "202", "16", "121", "16", "203", "16", "204", "16", "122", "16", "205", "16", "206", "16", "207", "16", "208", "16", "125", "16", "209", "16", "123", "16", "210", "17", "211", "17", "212", "17", "7", "17", "73", "17", "77", "17", "75", "17", "79", "17", "80", "17", "173", "17", "68", "17", "78", "17", "213", "17", "81", "17", "56", "17", "69", "17", "214", "17", "72", "17", "76", "17", "74", "17", "82", "19", "215", "19", "216", "19", "217", "19", "189", "19", "218", "19", "219", "19", "179", "19", "23", "19", "220", "19", "221", "19", "26", "19", "222", "19", "223", "19", "15", "19", "224", "19", "225", "19", "191", "19", "22", "19", "226", "19", "190", "19", "174", "20", "176", "20", "188", "20", "177", "20", "175", "20", "187", "20", "186", "20", "227", "20", "189", "20", "228", "20", "19", "20", "229", "20", "230", "20", "23", "20", "192", "20", "231", "20", "191", "20", "174", "20", "15", "20", "2", "20", "22", "21", "2", "21", "15", "21", "1", "21", "22", "21", "3", "21", "232", "21", "18", "21", "19", "21", "233", "21", "234", "21", "235", "21", "26", "21", "236", "21", "237", "21", "176", "21", "238", "22", "176", "22", "177", "22", "175", "22", "174", "22", "15", "22", "26", "22", "191", "22", "19", "22", "2", "22", "188", "22", "186", "22", "182", "22", "239", "22", "240", "22", "190", "22", "241", "22", "178", "22", "242", "22", "243", "22", "244", "22", "245", "22", "180", "23", "246", "23", "247", "23", "227", "23", "248", "23", "249", "23", "250", "23", "251", "23", "252", "23", "253", "23", "254", "23", "255", "23", "256", "23", "257", "23", "258", "23", "259", "23", "260", "23", "261", "23", "262", "23", "263", "23", "264", "23", "265", "23", "266", "23", "267", "23", "268", "24", "187", "24", "269", "24", "270", "24", "271", "24", "272", "24", "47", "24", "273", "24", "274", "24", "275", "24", "2", "24", "276", "24", "277", "24", "278", "24", "279", "24", "3", "24", "9", "24", "56", "24", "280", "24", "1", "24", "281", "24", "282", "24", "283", "24", "44", "24", "4", "25", "6", "25", "5", "25", "7", "25", "52", "25", "137", "25", "3", "25", "2", "25", "4", "25", "161", "25", "32", "25", "284", "25", "37", "25", "1", "25", "16", "25", "169", "25", "285", "26", "242", "26", "182", "26", "175", "26", "178", "26", "286", "26", "241", "26", "174", "26", "287", "26", "288", "26", "289", "26", "290", "26", "291", "26", "292", "26", "293", "26", "15", "26", "190", "26", "294", "26", "22", "26", "295", "26", "237", "26", "296", "26", "245", "26", "183", "26", "297", "26", "180", "26", "176", "26", "298", "26", "299", "26", "300", "26", "301", "27", "302", "27", "303", "27", "304", "27", "305", "27", "306", "27", "307", "27", "308", "27", "309", "27", "310", "27", "311", "27", "312", "27", "23", "27", "313", "27", "314", "27", "315", "27", "316", "28", "317", "28", "318", "28", "8", "28", "4", "28", "319", "28", "320", "28", "16", "28", "321", "28", "322", "28", "323", "28", "324", "28", "3", "28", "325", "28", "57", "28", "5", "28", "44", "28", "69", "28", "326", "28", "50", "28", "327", "28", "328", "28", "329", "28", "330", "28", "305", "29", "57", "29", "3", "29", "31", "29", "38", "29", "64", "29", "8", "29", "331", "29", "39", "29", "45", "29", "5", "29", "60", "29", "67", "29", "33", "29", "56", "29", "40", "29", "28", "29", "42", "29", "36", "29", "332", "29", "333", "29", "138", "30", "317", "30", "318", "30", "3", "30", "325", "30", "4", "30", "8", "30", "5", "30", "57", "30", "323", "30", "322", "30", "334", "30", "335", "30", "50", "30", "37", "30", "284", "30", "41", "30", "44", "30", "16", "30", "319", "30", "328", "30", "330", "30", "69", "31", "5", "31", "1", "31", "57", "31", "59", "31", "40", "31", "8", "31", "53", "31", "60", "31", "45", "31", "52", "31", "42", "31", "28", "31", "43", "31", "29", "31", "3", "31", "33", "31", "64", "31", "36", "31", "56", "31", "10", "31", "51", "31", "32", "31", "118", "31", "87", "31", "336", "31", "333", "31", "41", "31", "54", "31", "38", "32", "33", "32", "5", "32", "10", "32", "58", "32", "52", "32", "57", "32", "3", "32", "31", "32", "40", "32", "53", "32", "42", "32", "29", "32", "67", "32", "36", "32", "66", "32", "1", "32", "51", "32", "60", "32", "337", "32", "28", "32", "59", "32", "332", "32", "39", "33", "36", "33", "53", "33", "3", "33", "66", "33", "67", "33", "51", "33", "28", "33", "57", "33", "1", "33", "58", "33", "40", "33", "10", "33", "31", "33", "52", "33", "39", "33", "93", "33", "5", "33", "42", "33", "29", "33", "60", "34", "333", "34", "338", "34", "39", "34", "337", "34", "339", "34", "340", "34", "319", "34", "341", "34", "60", "34", "40", "34", "321", "34", "3", "34", "88", "34", "342", "34", "66", "34", "42", "34", "67", "34", "43", "34", "93", "34", "343", "35", "344", "35", "345", "35", "138", "35", "346", "35", "347", "35", "284", "35", "348", "35", "349", "35", "350", "35", "351", "35", "16", "35", "352", "35", "335", "35", "353", "35", "318", "35", "324", "35", "354", "35", "330", "35", "355", "35", "11", "35", "328", "35", "206", "35", "356", "35", "357", "35", "358", "35", "359", "35", "360", "35", "361", "35", "362", "35", "363", "35", "364", "37", "322", "37", "41", "37", "365", "37", "366", "37", "367", "37", "368", "37", "321", "37", "369", "37", "370", "37", "371", "37", "372", "37", "373", "37", "374", "37", "375", "37", "73", "37", "376", "37", "377", "37", "378", "37", "379", "37", "380", "37", "3", "37", "381", "37", "382", "37", "8", "37", "383", "37", "384", "37", "385", "37", "7", "37", "334", "37", "386", "37", "387", "37", "65", "38", "29", "38", "67", "38", "57", "38", "10", "38", "3", "38", "58", "38", "53", "38", "5", "38", "40", "38", "52", "38", "60", "38", "31", "38", "33", "38", "1", "38", "28", "38", "8", "38", "51", "38", "42", "38", "66", "38", "36", "38", "45", "38", "64", "38", "39", "39", "42", "39", "93", "39", "60", "39", "8", "39", "337", "39", "3", "39", "29", "39", "388", "39", "66", "39", "43", "39", "28", "39", "34", "39", "59", "39", "1", "39", "5", "39", "40", "39", "67", "39", "57", "39", "10", "39", "33", "40", "67", "40", "57", "40", "29", "40", "58", "40", "60", "40", "1", "40", "28", "40", "389", "40", "52", "40", "42", "40", "8", "40", "53", "40", "390", "40", "119", "40", "391", "40", "3", "40", "31", "40", "51", "40", "36", "40", "5", "40", "66", "40", "10", "40", "33", "40", "56", "41", "322", "41", "37", "41", "371", "41", "380", "41", "392", "41", "393", "41", "394", "41", "395", "41", "396", "41", "397", "41", "65", "41", "398", "41", "399", "41", "400", "41", "88", "41", "334", "41", "401", "41", "366", "41", "372", "41", "321", "41", "365", "41", "367", "41", "402", "41", "403", "41", "404", "41", "405", "41", "406", "41", "407", "41", "369", "41", "408", "41", "409", "41", "370", "42", "60", "42", "93", "42", "33", "42", "39", "42", "29", "42", "59", "42", "32", "42", "67", "42", "66", "42", "57", "42", "410", "42", "10", "42", "1", "42", "28", "42", "58", "42", "8", "42", "138", "42", "5", "42", "3", "42", "337", "42", "388", "42", "43", "42", "411", "42", "358", "43", "412", "43", "413", "43", "324", "43", "41", "43", "3", "43", "337", "43", "348", "43", "8", "43", "322", "43", "37", "43", "59", "43", "388", "43", "40", "43", "93", "43", "31", "43", "335", "43", "414", "43", "88", "43", "39", "43", "42", "44", "56", "44", "326", "44", "155", "44", "327", "44", "415", "44", "281", "44", "416", "44", "417", "44", "329", "44", "42", "44", "74", "44", "45", "44", "57", "44", "8", "44", "418", "44", "5", "44", "39", "44", "33", "44", "60", "44", "66", "44", "28", "44", "67", "44", "3", "45", "28", "45", "29", "45", "60", "45", "51", "45", "42", "45", "5", "45", "33", "45", "58", "45", "39", "45", "1", "45", "31", "45", "341", "45", "44", "45", "325", "45", "67", "45", "59", "45", "278", "45", "56", "45", "3", "45", "57", "45", "40", "45", "66", "47", "2", "47", "419", "47", "9", "47", "420", "47", "4", "47", "3", "47", "46", "47", "1", "47", "421", "47", "422", "47", "423", "47", "21", "47", "424", "47", "425", "47", "426", "47", "13", "49", "155", "49", "427", "49", "4", "49", "1", "49", "66", "49", "61", "49", "5", "49", "326", "49", "44", "49", "347", "49", "59", "49", "24", "49", "29", "49", "428", "49", "283", "49", "2", "49", "318", "49", "317", "49", "28", "49", "3", "49", "8", "49", "281", "49", "280", "50", "5", "50", "67", "50", "29", "50", "66", "50", "57", "50", "28", "50", "1", "50", "33", "50", "325", "50", "10", "50", "36", "50", "42", "50", "64", "50", "8", "50", "40", "50", "60", "50", "3", "50", "31", "50", "58");

        int NodeSize = 429;
        int matrix[][] = new int[NodeSize][NodeSize];
        int Dis[][] = new int[NodeSize][NodeSize];
        int Core[][] = new int[NodeSize][NodeSize];
        double clustering = 0;
        double AvgPath = 0;
        //init matrix
        for(int i = 0,j=1;j<map.size();i=i+2,j=j+2)
        {
            matrix[Integer.parseInt(map.get(i))][Integer.parseInt(map.get(j))] = 1;
            matrix[Integer.parseInt(map.get(j))][Integer.parseInt(map.get(i))] = 1;
        }
        //ShowMatrix(NodeSize,matrix);
        //work out node-degree distribution
        Degree = DegreeDis(NodeSize,matrix);
        System.out.println(Degree);
        clustering = Clustering();
        //System.out.println(clustering);
        System.out.println(Core);
        ShowMatrix(NodeSize,Core);

//        for(int i = 0;i<Degree.size();i++)
//        {
//            System.out.println(Degree.get(i));
//        }
        Dis = ShortestPath();
        AvgPath = AvgShortest(Dis);
        //System.out.println(AvgPath);
        //ShowMatrix(NodeSize,Dis);

    }

    public static void WriteJson()
    {
        String JSData = "{";
        JSData = JSData + "\"nodes\": [ \n";

        for (int i =1 ;i<NodeSize;i++) {
            if(NodeDelete[i]==1)
                continue;
            ArrayList<String> Info = new ArrayList<String >();
            Info = mongodb.FindDocumentInf("Information3","id",""+i);
            //tag name national mainwork
            if(i!=1)
                JSData += ",";
            JSData = JSData + "{" + "\"id\": \"" + i + "\",";
            JSData += "      \"labels\": [\n" +
                    "        \"Company\"\n" +
                    "      ], \n";
            JSData += "\"properties\":{" + "\"keyNo\":"+"\""+i+"\"" + ","; //keyNo;
            JSData += "\"registCapi\":"  ;//registCapi
            if(Info.size()>0)
                JSData+="\""+Info.get(0)+"\",\n";
            else
                JSData+="\"Null\" ,\n";
            JSData += "\"name\":" ;//Name
            if(Info.size()>1)
                JSData+="\""+Info.get(1)+"\", \n";
            else
                JSData+="\"Null\" ,\n";
            JSData += "\"econKind\":" ;//econKind
            if(Info.size()>2)
                JSData+="\""+Info.get(2)+"\",\n";
            else
                JSData+="\"Null\" ,\n";
            JSData += "\"status\":";//status
            if(Info.size()>3)
                JSData+="\""+Info.get(3)+"\" \n";
            else
                JSData+="\"Null\" \n";
            JSData += "},\n" ;

            JSData += "\"type\":" + "\"Company\",\n";//type
            if(Info.size()>1)
                JSData += "\"name\":" + "\"" + Info.get(1)+"\", \n";//name
            else
                JSData += "\"name\":" + "\"" + "NULL"+"\", \n";//name

            JSData += "\"degree\":"+Degree.get(i-1);
            JSData += "}\n";
        }
        JSData +="],";
        JSData +="\"edges\": [";
        for(int i = 0,j=1;j<Map.size();i=i+2,j=j+2)
        {
            if(NodeDelete[Integer.parseInt(Map.get(i))]==1 || NodeDelete[Integer.parseInt(Map.get(j))]==1)
                continue;
            else
            {
                if(i!=0)
                {
                    JSData+= ",";
                }
                JSData+="{ \n";
                JSData+="\"id\":" + i + ",\n";
                JSData+="\"type\":" + "\"EMPLOY\", \n";
                JSData+="\"properties\": { \n";
                JSData+="\"role\": \"董事\" \n";
                JSData+="}, \n";
                JSData+="\"source\":"  +"\"" + Map.get(i) +"\", \n";
                JSData+="\"target\":"  +"\"" + Map.get(j) +"\" \n";
                JSData+="} \n";

            }
        }
        JSData+="]";
        JSData+="}";
        JSData.replaceAll("\n", "\\u000a");
        FileWriter writer;
        try
        {
            writer = new FileWriter("./src/main/resources/static/Map2.json");//./../resources/static/templates/aqi-beijing.json
            writer.write(JSData);
            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }


    public static void ShowMatrix(int NodeSize,int[][] matrix)
    {
        for (int i =0;i<NodeSize;i++)
        {
            for(int j =0;j<NodeSize;j++)
            {
                System.out.print(matrix[i][j]+" ");
            }
            System.out.println(" ");
        }
    }

    public static int[][] ShortestPath ()
    {
        int[][] dis = new int[NodeSize][NodeSize];
        int[][] path = new int[NodeSize][NodeSize];
        for (int i = 1 ;i<NodeSize;i++)
            for (int j = 1 ;j<NodeSize;j++)
                if(matrix[i][j]==0)
                {
                    dis[i][j]=999;
                }
                else
                {
                    dis[i][j]=1;
                    path[i][j]=j;
                }
        for (int k =1;k<NodeSize;k++)
        {
            if(NodeDelete[k]==1)
                continue;
            for(int i = 1;i<NodeSize;i++ )
            {
                if (NodeDelete[i]==1)
                    continue;
                for(int j=1;j<NodeSize;j++)
                {
                    if(NodeDelete[j]==1)
                        continue;
                    int temp = (dis[i][k]==999||dis[k][j]==999)? 999 : dis[i][k]+dis[j][k];
                    if(temp<dis[i][j])
                    {
                        dis[i][j]=temp;
                        path[i][j]=path[i][k];
                    }
                }
            }
        }
        return dis;
    }

    public static double AvgShortest(int[][] matrix)
    {
        double result =0;
        double NodeD = 0;
        for(int i =1;i< NodeSize;i++)
        {
            if(NodeDelete[i]==1)
            {
                NodeD=NodeD+1;
                continue;
            }
            for (int j =1;j<NodeSize;j++)
            {
                if(NodeDelete[j]==1)
                    continue;
                result += matrix[i][j];
            }
        }
        for (int x = 0 ;x<NodeDelete.length;x++)
        {
            System.out.println(NodeDelete[x]);
        }
        //ShowMatrix(NodeSize,matrix);
        result = (result - 2*(NodeSize-1-NodeD))/(NodeSize-1-NodeD)/(NodeSize-1-NodeD);
        return result;
    }

    public static ArrayList<Integer> DegreeDis(int NodeSize,int[][] matrix)
    {
        ArrayList<Integer> Degree = new ArrayList<Integer>();
        for(int i = 1;i<NodeSize;i++)
        {
            if(NodeDelete[i]==1)
            {
                Degree.add(0);
                continue;
            }
            int degree = 0;
            for (int j = 1;j<NodeSize ;j++)
            {
                if(matrix[i][j]==1)
                {
                    degree++;
                }
            }
            Degree.add(degree);
        }
        return Degree;
    }

    public static double Clustering()
    {
        double Result = 0;
        int NodeD =0;
        for (int i =1;i<NodeSize;i++)
        {
            if(NodeDelete[i]==1)
            {
                NodeD++;
                continue;
            }
            ArrayList<Integer> neighbor = new ArrayList<Integer>();
            double K = 0;
            double E = 0;
            double T = 0;
            double C = 0;
            for (int j = 1; j < NodeSize; j++) {
                if (NodeDelete[j] == 1)
                    continue;
                if (matrix[i][j] == 1) {
                    K++;
                    neighbor.add(j);
                }
            }

            T = K*(K-1)/2;
            if(T==0)
                continue;
            if(neighbor.size()==1)
            {
                continue;
            }
            for (int j =0;j<neighbor.size();j++)
            {
                for(int k =j;k<neighbor.size();k++)
                {
                    if(matrix[neighbor.get(j)][neighbor.get(k)]==1)
                    {
                        E++;
                    }
                }
            }
            System.out.println(E);
            System.out.println(T);
            C = E/T;
            System.out.println(C);
            Result += C;
            System.out.println(Result);
        }
        return Result/(NodeSize-NodeD);
    }

    public static int[][] Coreness()
    {
        int[][] CorResult = new int[NodeSize][NodeSize];
        int core = 0;
        int flag = 0;
        while (1==1)
        {
            flag = 0;
            ArrayList<Integer> queue = new ArrayList<Integer>();
            do {
                queue.clear();
                for (int i =0 ;i<Degree.size();i++)
                {
                    if(Degree.get(i)<=-1)
                        continue;
                    if(Degree.get(i)<=core)
                    {
                        CorResult[core][i+1]=1;
                        Degree.set(i,-1);
                        queue.add(i);
                    }
                }
                if (queue.size()>0)
                {
                    for (int i =0;i<queue.size();i++)
                    {
                        for (int k =1 ;k<NodeSize;k++)
                        {
                            if(matrix[queue.get(i)+1][k]==1)
                            {
                                Degree.set(k-1,Degree.get(k-1)-1);
                            }
                        }
                    }
                }
            }while(queue.size()>0);
            System.out.println(core);
            System.out.println(Degree);
            core++;
            for(int x =0;x<Degree.size();x++)
            {
                if (Degree.get(x)>-1)
                {
                    flag = 1;
                    break;
                }
            }
            if (flag == 0)
                break;
        }
        return CorResult;
    }

    public static int[] CornessDis(int[][]cor)
    {
        int cordis[] = new int[50];
        for (int i =0;i<50;i++)
        {
            int Number = 0;
            for(int index = 0;index < NodeSize;index++)
            {
                if(NodeDelete[index]==1)
                    continue;
                else
                    Number+=cor[i][index];
            }
            cordis[i] = Number;
        }
        return cordis;
    }

    public static void WriteCornessData(int[] Dis)
    {
        ArrayList<Map<String, Integer>> DegreeNodeFile = new ArrayList<Map<String,Integer>>();
        String data = "[";
        for (int i =0 ;i<Dis.length;i++)
        {
            if (i!=0)
            {
                data += ",";
            }
            data += "["+i+","+Dis[i]+"]";
            Map<String,Integer> OneDegree =  new HashMap<>();
            OneDegree.put(""+i,Dis[i]);
            DegreeNodeFile.add(OneDegree);
        }
        data += "]";
        System.out.println(data);
        FileWriter writer;
        try
        {
            writer = new FileWriter("./src/main/resources/static/Corness2.json");//./../resources/static/templates/aqi-beijing.json
            writer.write(data);
            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(DegreeNodeFile);
    }
}
